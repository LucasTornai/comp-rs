WHITESPACE = _{ " " | "\t" }

eoi = _{ !ANY }

program = _{ SOI ~ main_func ~ eoi }

main_func = { 
    "begin:" ~ NEWLINE* ~
    ((var_decl | condition_statement | while_statement) ~ NEWLINE*)* ~
    "end"
}

t_id = @{
    ASCII_ALPHA+ ~ 
    (ASCII_DIGIT | ASCII_ALPHA)*
}

// start VARIABLES

var_decl = _{ flt_decl | str_decl }
var = _{ flt_var | str_var }

// :: STRING

str_value = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

str_var = {
    t_id ~ WHITESPACE* ~
    ("=" ~ WHITESPACE* ~ str_value)?
}

str_decl = {
    "str" ~ WHITESPACE* ~
    str_var ~ ("," ~ str_var)*
}

// :: FLOAT

flt_value = @{
    ("+" | "-")? ~
    ASCII_DIGIT+ ~
    ("." ~ ASCII_DIGIT+)?
}

flt_var = {
    t_id ~ WHITESPACE* ~
    ("=" ~ WHITESPACE* ~ expr)?
}

flt_decl = {
    "flt" ~ WHITESPACE* ~
    flt_var ~ ("," ~ flt_var)*
}

// end VARIABLES

// LOGICAL STATEMENTS

condition_statement = {
    if_stmt ~ (WHITESPACE | NEWLINE)* ~
    (else_stmt | if_stmt)*
}

if_stmt = {
    "in case " ~ WHITESPACE* ~ 
    boolean_expr ~ WHITESPACE* ~ "then:" ~ 
    ((NEWLINE | WHITESPACE)* ~ (condition_statement | var_decl | expr))* ~ (NEWLINE | WHITESPACE)* ~
    "end"
}

else_stmt = {
    "otherwise:" ~ (WHITESPACE | NEWLINE)* ~
    ((NEWLINE | WHITESPACE)* ~ (condition_statement | var_decl | expr))* ~ (NEWLINE | WHITESPACE)* ~
    "end"
}

// end LOGICAL STATEMENTS

// LOOP STATEMENTS

while_statement = {
    "during" ~ WHITESPACE* ~ 
    boolean_expr ~ (WHITESPACE|NEWLINE)* ~ "do:" ~
    ((NEWLINE | WHITESPACE)* ~ (condition_statement | var_decl))* ~ (NEWLINE | WHITESPACE)* ~
    "end" 
}

// end LOOP STATEMENTS

boolean_expr = @{
    (t_id | term) ~ WHITESPACE* ~ bool_operations ~ WHITESPACE* ~ (t_id | term)
}

bool_operations = { ">" | ">=" | "<" | "<=" | "==" | "!=" }

// NUMERICAL EXPRESSIONS

term = _{ flt_value | "(" ~ expr ~ ")" }

expr = {
    term ~ WHITESPACE* ~
    (
        operation{1} ~ WHITESPACE* ~
        term
    )*
}

operation = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }